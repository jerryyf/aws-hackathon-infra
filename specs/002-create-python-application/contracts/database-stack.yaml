# Database Stack Output Contract

**Stack Name**: `DatabaseStack`  
**Version**: 1.0.0  
**Description**: RDS PostgreSQL Multi-AZ, RDS Proxy, OpenSearch domain, and database credentials management

## Output Specifications

### RdsProxyEndpoint
- **Type**: String
- **Description**: RDS Proxy endpoint for application connections (connection pooling + failover)
- **Export Name**: `${AWS::StackName}-RdsProxyEndpoint`
- **Validation**: Must match pattern `[a-z0-9-]+\.proxy-[a-z0-9]+\.us-east-1\.rds\.amazonaws\.com`
- **Example**: `bedrock-agent-rds-proxy.proxy-abc123def456.us-east-1.rds.amazonaws.com`
- **Port**: 5432 (PostgreSQL default)
- **TLS Required**: Yes (enforced by proxy configuration)
- **Usage**: Primary database connection endpoint for ECS backend services

### RdsProxyReadWriteEndpoint
- **Type**: String
- **Description**: RDS Proxy read-write endpoint (explicit for primary instance routing)
- **Export Name**: `${AWS::StackName}-RdsProxyReadWriteEndpoint`
- **Validation**: Same pattern as RdsProxyEndpoint
- **Example**: `bedrock-agent-rds-proxy.proxy-abc123def456.us-east-1.rds.amazonaws.com`
- **Usage**: Write operations (inserts, updates, deletes)

### RdsInstanceEndpoint
- **Type**: String
- **Description**: Direct RDS instance endpoint (for administrative access, bypass proxy)
- **Export Name**: `${AWS::StackName}-RdsInstanceEndpoint`
- **Validation**: Must match pattern `[a-z0-9-]+\.[a-z0-9]+\.us-east-1\.rds\.amazonaws\.com`
- **Example**: `bedrock-agent-db.c1a2b3c4d5e6.us-east-1.rds.amazonaws.com`
- **Port**: 5432
- **Usage**: Database migrations, administrative queries, debugging (not for application use)

### RdsInstanceIdentifier
- **Type**: String
- **Description**: RDS instance identifier for monitoring and operations
- **Export Name**: `${AWS::StackName}-RdsInstanceIdentifier`
- **Validation**: Must match pattern `[a-z][a-z0-9-]{0,62}`
- **Example**: `bedrock-agent-db-us-east-1`
- **Usage**: CloudWatch metrics namespace, RDS API operations

### RdsDatabaseName
- **Type**: String
- **Description**: PostgreSQL database name
- **Export Name**: `${AWS::StackName}-RdsDatabaseName`
- **Validation**: Must be alphanumeric + underscores, max 63 characters
- **Example**: `bedrock_agent_db`
- **Usage**: Database connection string construction

### RdsMasterUsername
- **Type**: String
- **Description**: Master username for RDS authentication (stored in Secrets Manager)
- **Export Name**: `${AWS::StackName}-RdsMasterUsername`
- **Validation**: Must be alphanumeric, max 16 characters, not 'postgres' (reserved)
- **Example**: `dbadmin`
- **Usage**: Secrets Manager secret retrieval, connection string construction

### RdsMasterSecretArn
- **Type**: String
- **Description**: Secrets Manager secret ARN containing RDS master credentials
- **Export Name**: `${AWS::StackName}-RdsMasterSecretArn`
- **Validation**: Must match pattern `arn:aws:secretsmanager:us-east-1:\d{12}:secret:[a-zA-Z0-9/_+=.@-]+`
- **Example**: `arn:aws:secretsmanager:us-east-1:123456789012:secret:bedrock-agent/rds-master-abc123`
- **Secret Format**:
  ```json
  {
    "username": "dbadmin",
    "password": "<auto-generated-32-char-password>",
    "engine": "postgres",
    "host": "bedrock-agent-rds-proxy.proxy-abc123.us-east-1.rds.amazonaws.com",
    "port": 5432,
    "dbname": "bedrock_agent_db"
  }
  ```
- **Rotation**: Enabled (90 days)
- **Usage**: Application secret retrieval via VPC endpoint

### RdsSecurityGroupId
- **Type**: String
- **Description**: Security group ID attached to RDS instance
- **Export Name**: `${AWS::StackName}-RdsSecurityGroupId`
- **Validation**: Must match pattern `sg-[a-f0-9]{17}` (imported from SecurityStack)
- **Example**: `sg-5f6789012abcdef01`
- **Usage**: Verification of RDS network isolation

### RdsSubnetGroupName
- **Type**: String
- **Description**: RDS subnet group name (private data subnets)
- **Export Name**: `${AWS::StackName}-RdsSubnetGroupName`
- **Validation**: Must be lowercase alphanumeric + hyphens
- **Example**: `bedrock-agent-rds-subnet-group`
- **Subnets**: 10.0.31.0/24 (us-east-1a), 10.0.32.0/24 (us-east-1b)
- **Usage**: Validation of multi-AZ deployment

### RdsBackupRetentionPeriod
- **Type**: Number
- **Description**: Automated backup retention period in days
- **Export Name**: `${AWS::StackName}-RdsBackupRetentionPeriod`
- **Validation**: Must be 7 for dev, 30 for prod
- **Example**: `7`
- **Usage**: Disaster recovery planning, RPO calculation

### OpenSearchDomainEndpoint
- **Type**: String
- **Description**: OpenSearch domain HTTPS endpoint
- **Export Name**: `${AWS::StackName}-OpenSearchDomainEndpoint`
- **Validation**: Must match pattern `vpc-[a-z0-9-]+\.[a-z0-9]+\.us-east-1\.es\.amazonaws\.com`
- **Example**: `vpc-bedrock-agent-search.abc123def456.us-east-1.es.amazonaws.com`
- **Port**: 443 (HTTPS only)
- **Usage**: OpenSearch client configuration (indexing, search operations)

### OpenSearchDomainArn
- **Type**: String
- **Description**: OpenSearch domain ARN for IAM policies
- **Export Name**: `${AWS::StackName}-OpenSearchDomainArn`
- **Validation**: Must match pattern `arn:aws:es:us-east-1:\d{12}:domain/[a-z0-9-]+`
- **Example**: `arn:aws:es:us-east-1:123456789012:domain/bedrock-agent-search`
- **Usage**: IAM policy resource specification, fine-grained access control

### OpenSearchDomainName
- **Type**: String
- **Description**: OpenSearch domain name
- **Export Name**: `${AWS::StackName}-OpenSearchDomainName`
- **Validation**: Must be lowercase alphanumeric + hyphens, 3-28 characters
- **Example**: `bedrock-agent-search`
- **Usage**: CloudWatch metrics namespace, OpenSearch API operations

### OpenSearchSecurityGroupId
- **Type**: String
- **Description**: Security group ID attached to OpenSearch domain
- **Export Name**: `${AWS::StackName}-OpenSearchSecurityGroupId`
- **Validation**: Must match pattern `sg-[a-f0-9]{17}` (imported from SecurityStack)
- **Example**: `sg-6789012abcdef0123`
- **Usage**: Verification of OpenSearch network isolation

### OpenSearchNodeCount
- **Type**: Number
- **Description**: Number of OpenSearch data nodes
- **Export Name**: `${AWS::StackName}-OpenSearchNodeCount`
- **Validation**: Must be 2 for dev, 3 for prod
- **Example**: `3`
- **Usage**: Capacity planning, performance monitoring

### OpenSearchInstanceType
- **Type**: String
- **Description**: OpenSearch instance type
- **Export Name**: `${AWS::StackName}-OpenSearchInstanceType`
- **Validation**: Must be t3.small.search (dev) or r6g.large.search (prod)
- **Example**: `r6g.large.search`
- **Usage**: Cost tracking, performance benchmarking

### OpenSearchMasterUsername
- **Type**: String
- **Description**: OpenSearch master user for fine-grained access control (if enabled)
- **Export Name**: `${AWS::StackName}-OpenSearchMasterUsername`
- **Validation**: Alphanumeric, max 16 characters
- **Example**: `opsadmin`
- **Usage**: Fine-grained access control configuration (deferred to production)

## Contract Tests

### Test: RDS instance is Multi-AZ with encryption enabled
```python
def test_rds_multi_az_encrypted():
    template = Template.from_stack(database_stack)
    template.has_resource_properties("AWS::RDS::DBInstance", {
        "Engine": "postgres",
        "EngineVersion": Match.string_like_regexp("15\\..*"),
        "MultiAZ": True,
        "StorageEncrypted": True,
        "BackupRetentionPeriod": Match.any_value(),
        "DBSubnetGroupName": Match.any_value()
    })
```

### Test: RDS Proxy deployed with TLS requirement
```python
def test_rds_proxy_tls():
    template = Template.from_stack(database_stack)
    template.has_resource_properties("AWS::RDS::DBProxy", {
        "EngineFamily": "POSTGRESQL",
        "RequireTLS": True,
        "Auth": Match.array_with([
            Match.object_like({
                "AuthScheme": "SECRETS",
                "SecretArn": Match.any_value()
            })
        ])
    })
```

### Test: RDS master credentials stored in Secrets Manager with rotation
```python
def test_rds_secret_rotation():
    template = Template.from_stack(database_stack)
    secret = template.find_resources("AWS::SecretsManager::Secret", {
        "Description": Match.string_like_regexp(".*RDS master.*")
    })
    
    rotation_schedule = template.find_resources("AWS::SecretsManager::RotationSchedule")
    assert len(rotation_schedule) == 1
    assert rotation_schedule[0]["Properties"]["RotationRules"]["AutomaticallyAfterDays"] == 90
```

### Test: OpenSearch domain deployed in VPC with encryption
```python
def test_opensearch_vpc_encryption():
    template = Template.from_stack(database_stack)
    template.has_resource_properties("AWS::OpenSearchService::Domain", {
        "EngineVersion": Match.string_like_regexp("OpenSearch_2\\..*"),
        "VPCOptions": {
            "SubnetIds": Match.any_value(),
            "SecurityGroupIds": Match.any_value()
        },
        "EncryptionAtRestOptions": {
            "Enabled": True
        },
        "NodeToNodeEncryptionOptions": {
            "Enabled": True
        },
        "ClusterConfig": {
            "ZoneAwarenessEnabled": True,
            "ZoneAwarenessConfig": {
                "AvailabilityZoneCount": 2
            }
        }
    })
```

### Test: OpenSearch cluster sizing matches environment
```python
def test_opensearch_cluster_sizing(env_name):
    template = Template.from_stack(database_stack)
    opensearch = template.find_resources("AWS::OpenSearchService::Domain")
    
    cluster_config = opensearch[0]["Properties"]["ClusterConfig"]
    
    if env_name == "dev":
        assert cluster_config["InstanceCount"] == 2
        assert cluster_config["InstanceType"] == "t3.small.search"
        assert cluster_config["DedicatedMasterEnabled"] == False
    elif env_name == "prod":
        assert cluster_config["InstanceCount"] == 3
        assert cluster_config["InstanceType"] == "r6g.large.search"
        assert cluster_config["DedicatedMasterEnabled"] == True
        assert cluster_config["DedicatedMasterCount"] == 3
```

### Test: RDS deployed in private data subnets only
```python
def test_rds_private_subnet_deployment():
    template = Template.from_stack(database_stack)
    subnet_group = template.find_resources("AWS::RDS::DBSubnetGroup")
    
    subnet_ids = subnet_group[0]["Properties"]["SubnetIds"]
    # Should reference private data subnets from NetworkStack
    assert all("PrivateDataSubnet" in str(subnet_id) for subnet_id in subnet_ids)
```

### Test: All database outputs are correctly exported
```python
def test_database_stack_outputs():
    template = Template.from_stack(database_stack)
    outputs = template.find_outputs("*")
    
    required_outputs = [
        "RdsProxyEndpoint",
        "RdsMasterSecretArn",
        "OpenSearchDomainEndpoint",
        "OpenSearchDomainArn"
    ]
    
    for output_name in required_outputs:
        assert output_name in outputs
        assert "Export" in outputs[output_name]
```

## Dependencies
- `NetworkStack` (requires private data subnet IDs)
- `SecurityStack` (requires RDS and OpenSearch security group IDs)

## Dependent Stacks
- `ComputeStack` (requires RDS Proxy endpoint and OpenSearch endpoint for ECS task environment variables)
- `MonitoringStack` (requires RDS instance identifier and OpenSearch domain name for CloudWatch metrics)
